#!/usr/bin/perl
# $Id$

# -- AUTHOR & COPYRIGHT -------
# wifi ap monitor and notification script
# Copyright 2011 Charles Mauch (cmauch@gmail.com)
# Licensed under the GPLv3

# -- DESCRIPTION --------------
# Runs in a loop every 30 seconds, pulling in the output from iwlist ethx
# scanning and records every accesspoint seen.  When new AP's are available,
# a notice is sent through gnome's notify system indicating a new AP is online
# with it's relative signal strength.
#
# Note that the script is basicly inactive if both rfkill detects a hardware
# block or a wifi connection has been established.

# -- RELATED ------------------
# see notify-send and iwlist man page
#

# -- INSTALL ------------------
# * copy script somewhere appropriate, like ~/bin
# * open gnome's Startup Application, and create an entry for the scripts in
#   it to start the script at session start.
# * create a new file in /etc/sudoers.d/ and place an entry in it for iwpriv
#   your_username ALL= NOPASSWD: /sbin/iwlist

my %seenaps;
my $notify_open_timeout   = 8000; # Milliseconds
my $notify_closed_timeout = 3500; # Milliseconds


while () {
 if ( &rfkill eq "no" ) {
  if ( &NetStatus eq "disconnected" ) {
   &FindAPs();
  }
 }
sleep 30;
}

sub rfkill {
    my $rfkill = `rfkill list wifi`;
    $rfkill =~ /Hard\ blocked:\ (.*)\n/go;
   return $1;
}

sub NetStatus {
    my $nmtool = `nm-tool | grep "State"`;
    $nmtool =~ /State:\ (.*)/g;
   return $1;
}


## find access points
sub FindAPs {
    my $apoints = `sudo /sbin/iwlist eth1 scanning`;
    my @spoints = split /Cell/, $apoints;

    my $j=0;
    undef(@Address);
    undef(@ESSID);
    undef(@Mode);
    undef(@Frequency);
    undef(@Encryption);
    undef(@Quality);
    undef(@Signal);
    undef(@Noise);
    undef(@Speed);

    ## parse found APs
    for (my $i=0; $i<=$#spoints; $i++) {

        if ($spoints[$i] =~/Address:\s*(\w\w:\w\w:\w\w:\w\w:\w\w:\w\w)/i) {
            $j++;
            $Address[$j] = $1;

            if ($spoints[$i] =~/ESSID:\s*\"(.*)\"/i) {
                $ESSID[$j] = $1;
            }
            if ($spoints[$i] =~/Mode:\s*(Managed|Ad\-hoc|Auto|Master)\s*/i) {
                $Mode[$j] = $1;
            }
            if ($spoints[$i] =~/Frequency:\s*([\w\.]+)\s*/i) {
                $Frequency[$j] = $1;
            }
            if ($spoints[$i] =~/Encryption key:\s*(on|off)\s*/i) {
                $Encryption[$j] = $1;
            }
            if ($spoints[$i] =~/Quality:(.*?)\s/i) {
                $Quality[$j] = $1;
            }
            if ($spoints[$i] =~/Signal level:(.*?)\sdBm/i) {
                $Signal[$j] = $1;
            }
            if ($spoints[$i] =~/Noise level:(.*?)\s*dBm/i) {
                $Noise[$j] = $1;
            }
            if ($spoints[$i] =~/(11)\ Mb\/s/i) {
                $Speed[$j] = "802.11b";
            }
            if ($spoints[$i] =~/(54)\ Mb\/s/i) {
                $Speed[$j] = "802.11ag";
            }
        }
    }

    ## show found APs
    &ListOpenAPs;
    &ListClosedAPs;
}

## list Crypted APs
sub ListClosedAPs {
    my $dialog_ap;
    for (my $j=1; $j<=$#Address; $j++) {
	next if ( $Encryption[$j] ne "on" );
    next if defined ( $seen{$ESSID[$j]} );
    $seen{$ESSID[$j]}++;
    my $sig = calc_perc( $Quality[$j] );
	$dialog_ap = sprintf( "\'%s\ at\ %s%\ Strength\'\ \'Found <b>Encrypted</b> %s %s Network\'", $ESSID[$j], $sig, $Mode[$j], $Speed[$j] );
    system( "notify-send --expire-time=$notify_closed_timeout --urgency=low --icon=network-wireless $dialog_ap");
    }
}

## list Open APs
# Need code to enable option to click on "connect" button in dialog
sub ListOpenAPs {
    my $dialog_ap;
    for (my $j=1; $j<=$#Address; $j++) {
	next unless ( $Encryption[$j] ne "on" );
    next if defined ( $seen{$ESSID[$j]} );
    $seen{$ESSID[$j]}++;
    my $sig = calc_perc( $Quality[$j] );
	$dialog_ap = sprintf( "\'%s\ at\ %s%\ Strength\'\ \'Found <b>Public</b> %s %s Network\'", $ESSID[$j], $sig, $Mode[$j], $speed[$j] );
    system( "notify-send --expire-time=$notify_open_timeout --urgency=low --icon=network-wireless $dialog_ap");
    }
}

## Take quality and convert to 20% rounded number (best we can do with linux)
sub calc_perc {
  my $qual = shift;
  $qual =~ /(.)\/.*/;
 return ( $1 / 5 ) * 100;
}
